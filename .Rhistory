vignette(RedeR)
library(RedeR)
vignette(RedeR)
vignette('RedeR')
rdp <- RedPort ()
calld(rdp)
g <- graph.adjacency(tf.olaps)
g
addGraph(rdp, g)
g <- graph.adjacency(tf.olaps, weighted=TRUE)
names(g)
g
g <- graph.adjacency(tf.olaps, weighted="D")
g
edge.attributes(g)
g <- graph.adjacency(tf.olaps, weighted="Weight")
edge.attributes(g)
?addGraph
calld(rdp)
addGraph(rdp, g)
edges(g)
edges(g)[[1]]
mode(edges(g)[[1]])
unlist(edges(g)[[1]])
edges(g)
edge(g)
?edges
library(igraph)
?cor.test
x <- 1:10
y <- x*2
cor.test(x, y)
cor.res <- cor.test(x, y)
cor.res$statistic
cor.res$p.value
install.packages("psych")
library(psych)
corr.test
?corr.test
library(igraph)
source("build_net.R")
g <- buildNetCor(expr.data, tfs, 0.01, perm=TRUE)
g
adj.mat <- get.adjacency(g)
dim(adj.mat)
tfs
badj.mat <- adj.mat[which(tfs == TRUE), which(tfs==FALSE)]
dim(badj.mat)
g <- graph.incidence(badj.mat)
g
hist(degree(g, 1:100))
degree(g, 1:100)
hist(degree(g, 1:100))[9:100]
hist(degree(g, 1:100)[9:100])
g <- buildNetCor(expr.data, tfs, 0.01)
library(Matrix)
?Matrix
?Diagonal
rowsums
rowSums
dim(badj.mat)
olaps <- badj.mat %*% t(badj.mat)
olaps <- rowSums(olaps)
olaps
?sort
sort.int(olaps, decreasing=TRUE, index.return=TRUE)
res <- sort.int(olaps, decreasing=TRUE, index.return=TRUE)
res$ix[1:10]
olaps <- badj.mat %*% t(badj.mat)
l.regs <- res$ix[1:10]
olap.adj <- olaps[l.regs, l.regs]
olap.adj
olaps[1,98]
olaps
g.res <- buildNetCor(expr.data, tfs, 0.01)
g.res[[1]]
badj.mat <- g.res[[2]]
olaps <- badj.mat %*% t(badj.mat)
sort.int(rowSums(olaps), decreasing=T, index.return=T)$ix[1:10]
l.regs <- sort.int(rowSums(olaps), decreasing=T, index.return=T)$ix[1:10]
l.regs
olaps[l.regs, l.regs]
l.olaps <- olaps[l.regs, l.regs]
l.olaps
?graph
?graph.adjacency
g.olaps <- graph.adjacency(l.olaps, mode="undirected", weighted="weight", diag=FALSE)
g.olaps
degree(g.olaps)
?addGraph
library(RedeR)
?addGraph
?RedPort()
?RedPort
rdp <- RedPort()
?calld
calld(rdp)
addGraph(rdp, g.olaps)
get.vertex.attribute(g.olaps, "weight")
get.vertex.attribute(graph=g.olaps, name="weight")
addGraph(rdp, g.olaps)
g.olaps <- graph.adjacency(l.olaps, mode="undirected", weighted="weight", diag=FALSE)
g
g[[1]]
degrees(g[[1]], 1:100)
hist(degree(g[[1]], 1:100))
hist(degree(g[[1]], 1:100))
summary(degree(g[[1]], 1:100))
dim(badj.mat)
library(minet)
D <- cbind(c(0,1,0,0,1,0,0,1),!
!c(0,1,0,0,1,0,0,1),!
!c(1,0,1,1,0,1,1,0),!
!c(1,0,1,0,1,0,1,0),!
!c(0,1,0,0,1,0,1,1))!

D <- cbind(c(0,1,0,0,1,0,0,1),
c(0,1,0,0,1,0,0,1),
c(1,0,1,1,0,1,1,0),
c(1,0,1,0,1,0,1,0),
c(0,1,0,0,1,0,1,1))
D
image(D)
D
colnames(D) <- LETTERS[1:ncol(D)]!

colnames(D) <- LETTERS[1:ncol(D)]
D
MI <- build.mim(D)
MI
MI <- round(MI, 2)
MI
round(cor(D), 2)
source("build_net.R")
corTest(D)
cor.res <- corTest(D)
p.cutoff <- 0.01
adj.mat
cor.res$r
diag(adj.mat) <- 0
adj.mat
library(igraph)
tfs
dim(expr.data)
head(colnames(expr.data))
which(tfs == TRUE)
head(which(tfs == TRUE), n=6)
head(which(tfs == TRUE), n=6)
dim(r)
ntf <- head(which(tfs == TRUE), n=6)
r <- r[ntf, -ntf]
dim(r)
genes <- which(tfs == FALSE)
genes
r <- cor(expr.mat)
dim(r)
tfs
r[which(tfs == TRUE), which(tfs == TRUE)
]
r <- r[which(tfs == TRUE), which(tfs == TRUE)]
dim(r)
r <- cor(expr.mat)
r <- r[which(tfs == TRUE), which(tfs == FALSE)]
dim(r)
hist(r[1, ])
r <- r[1:5, 1:10]
dim(r)
r
dim(expr.mat)
epxr.mat[, "ILMN_175319"]
expr.mat[, "ILMN_175319"]
which(colnames(expr.mat) == "ILMN_175319")
head(colnames(expr.mat))
"ILMN_175319" %in% colnames(expr.mat)
"ILMN_1753196" %in% colnames(expr.mat)
expr.mat[, "ILMN_1753196"]
tf1 <- expr.mat[, "ILMN_1753196"]
r
g1 <- expr.mat[, "ILMN_1781906"]
cor(tf1, g1)
g1 <- expr.mat[, "ILMN_1682336"
]
cor(tf1, g1)
dim(expr.data)
list.files()
list.files("data")
load("data/annotation.RData")
colnames(annotation)
annotation[annotation$probeID == "ILMN_1682336"]
annotation[annotation$probeID == "ILMN_1682336",]
g <- buildNetCor(expr.data, tfs, .01)
degree.distribution(g)
gr <- g[[1]]
degree.distribution(gr)
hist(degree.distribution(gr))
hist(table(degree(gr)))
badj.mat <- g[[2]]
dim(badj.mat)
dtf <- rowSums(badj.mat)
dtf
hist(dtf)
olaps <- badj.mat %*% t(badj.mat)
table(badj.mat)
r <- cor(expr.mat)
diag(3)
dim(r)
dir <- r %*% solve(diag(2000) + r)
dim(dir)
badj.mat <- dir[which(tfs == TRUE), which(tfs == FALSE)]
dim(badj.mat)
g1 <- graph.incidence(badj.mat)
g1
dim(dir)
r <- dir
dim(expr.mat)
cor.res <- list(r=r, p=p)
g
hist(r)
a <- matrix(10*rnorm(16), nrow=4)
a
a <- matrix(abs(10*rnorm(16)), nrow=4)
dir <- a %*% solve(diag(4) + a)
dir
eig.res <- eigen(a)
dir
a %*% t(a)
a <- a %*% t(a)
isSymmetric(a)
a
res <- nd(a)
source("build_net.R")
nd(a)
source("build_net.R")
nd(a)
res <- nd(a)
na <- res[[2]]
na
na + (na %*% na) + (na %*% na %*% na) + (na %*% na %*% na %*% na)
 968.8045 * na
r <- cor(expr.mat)
res <- nd(r)
hist(res[[2]])
res[[2]] <- res[[2]] * 100
hist(res[[2]])
a <- (1, 2, 3, 4, 5)
a <- c(1, 2, 3, 4, 5)
a - min(a)
a1 <-  matrix(rnorm(100), nrow=10))
a1 <- matrix(rnorm(100), nrow=10)
a1
a1 - min(a1)
hist(a1 - min(a1))
nr <- abs(r[[2]])
nr <- nr - min(nr)
hist(nr)
dim(nr)
dim(r[[2]])
dim(res[[2]])
nr <- abs(res[[2]])
nr <- nr - min(nr)
hist(nr)
hist(nr)
n <-  2000
r <- nr
cor.res <- list(r=r, p=p)
g
dim(badj.mat)
hist()
hist(degree(g, 1:100))
l.olaps
diag(l.olaps) <- 0
l.olaps
g.olaps
degree(g.olaps)
hist()
hist(g.olaps)
library(RedeR)
olaps
dim(r)
res <- nd(r)
nr <- res[[2]]
gcor <- buildNetCor(expr.data, tfs, 0.01)
sim <- gcor[[2]]
table(sim)
dim(r)
res <- nd(r)
nr <- res[[2]]
adj.mat <- sim
nr <- nr * 100
nr <- abs(nr)
nr <- nr - min(nr)
t <- (nr * sqrt(n - 2))/sqrt(1 - nr^2)
cor.res <- list(r=r, p=p)
nadj.mat <- cor.res$r
dim(adj.mat)
nbadj.mat <- nadj.mat[which(tfs == TRUE), which(tfs==FALSE)]
badj.mat <- adj.mat
dim(adj.mat)
dim(nadj.mat)
dim(nbadj.mat)
table(adj.mat)
table(badj.mat)
table(nbadj.mat)
E <- which(badj.mat == 1)
E1 <- which(nbadj.mat == 1)
intersection(E, E1)
intersect(E, E1)
length(intersect(E, E1))
length(E1)
mapply(is.element, E1, E)
E1[1]
E1[1] %in% E
rnorm(100, 0, 0.001)
rnorm(100, 0, 0.01)
rnorm(100, 0, 0.1)
dim(r)
res <- nd(r, bet=0.9)
hist(res[[2]])
source("build_net.R")
res <- nd(r)
source("build_net.R")
res <- nd(r)
hist(res[[2]])
diag(r) <- 0
dim(r)
wn <- matrix(rnorm(2000*2000, 0, 0.01), nrow=2000)
r <- r + wn
hist(r)
res <- nd(r)
r <- abs(r)
eig.res <- eigen(r)
str(eig.res)
g
gcor
g[[1]]
g[[2]]
g
g <- buildNetCor(expr.data, tfs, 0.01)
g
g[[2]]
g[[1]]
adj.mat <- get.adjacency(g[[1]])
dim(adj.mat)
isSymmetric(adj.mat)
mode(adj.mat)
adj.mat <- as.matrix(adj.mat)
mode(adj.mat)
isSymmetric(adj.mat)
head(colnames(adj.mat))
colnames(expr.mat)[which(tfs == TRUE)]
tf.names <- colnames(expr.mat)[which(tfs == TRUE)]
tf1.names <- colnames(adj.mat)[1:100]
intersect(tf.names, tf1.names)
length(intersect(tf.names, tf1.names))
table(adj.mat[1:100, 1:100])
adj.mat <- adj.mat[1:100, ]
table(adj.mat)
r <- cor(
adj.mat <- as.matrix(get.adjacency(g[[1]]))
head(diag(adj.mat))
table(diag(adj.mat))
r <- cor(expr.mat)
r <- r * adj.mat
dim(r)
hist(r)
adj.mat <- adj.mat[1:100, ]
a <- matrix(c(1,2,3,4), nrow=2)
a
a1 <- matrix(c(1,2,3,5), nrow=2)
which(a == a1)
which(a == a1, arr.ind=TRUE)
xy <- which(a == a1, arr.ind=TRUE)
xy[1, ]
a[xy[1, ]
]
a[xy[1, ]]
a[xy[1, ], ]
a[xy[1, ]]
xy[1, ][1]
xy[1, ][2]
source("nd.R")
r <- cor(expr.mat)
tf <- r[which(tfs == TRUE), which(tfs == TRUE)]
dim(tf)
dim(r[which(tfs == TRUE), which(tfs == FALSE)])
rt <- cbind(tf, r[which(tfs == TRUE), which(tfs == FALSE)])
dim(rt)
isSymmetric(rt)
isSymmetric(rt[1:100, 1:100])
hist(rt[1:100, 1:100])
rt1 <- nd(rt, 0.5, 0.1)
souce("nd.R")
source("nd.R")
rt1 <- nd(rt, 0.5, 0.1)
source("nd.R")
rt1 <- nd(rt, 0.5, 0.1)
cor <- rt
xy
is.null(xy)
dim(xy)
nrow(xy)
y <- quantile(c(cor, 1-0.1)
)
y
y <- quantile(c(cor), 0.9)
y
mat.th <- cor * (cor >= y)
D <- matrix(rep(0, nrow(adj.mat)*nrow(adj.mat)), nrow=nrow(adj.mat))

dim(matrix(rep(0, (n-n.tf)*n), ncol=(n-n.tf)))
dim(matrix(rep(0, (n-n.tf)*n), nrow=(n-n.tf)))
dim(mat.th)
lam.n
lam.p
beta <- 0.5
scale.eigen
head(D)
head(diag(D))
?solve
solve(U)
dim(rt)
rn <- nd(rt, 0.5, 0.1)
source("nd.R")
rn <- nd(rt, 0.5, 0.1)
dim(cor)
alpha = 0.1
which(rt < 0)
rt <- abs(rT)
rt <- abs(rt)
cor <- rt
cor <- rt
xy
solve(U)
?eigen
eig.res$values[1]
eig.res$values[length(eig.res$values)]
isSymmetric(mat.th)
isSymmetric(rt)
rt <- (rt %*% t(rt)) / 2
isSymmetric(rT)
isSymmetric(rt)
hist(rT)
hist(rt)
r <- cor(expr.mat)
tf <- r[which(tfs == TRUE), which(tfs==TRUE)]
isSymmetric(tf)
ge <- r[which(tfs == TRUE), which(tfs==FALSE)]
rt <- cbind(tf, ge)
dim(rt)
isSymmetric(rt)
hist(rt)
rt <- abs(rt)
hist(rt)
diag(rt) <- 0
rt[lower.tri(rt)] <- t(rt[upper.tri(rt)])
rt <- rbind(rt, matrix(rep(0, (n-n.tf)*n), nrow=(n-n.tf)))
dim(rt)
rt[lower.tri(rt)] <- t(rt[upper.tri(rt)])
isSymmetric(rt)
rt[10, 50]
rt[50, 10]
library(Matrix)
tf <- r[which(tfs == TRUE), which(tfs==TRUE)]
ge <- r[which(tfs == TRUE), which(tfs==FALSE)]
rt <- cbind(tf, ge)
rt <- rbind(rt, matrix(rep(0, (n-n.tf)*n), nrow=(n-n.tf)))
isSymmetric(rt)
rt1 <- Matrix(rt)
dim(rt1)
rt1 <- forceSymmetric(rt1)
isSymmetric(rt1)
rt <- cbind(tf, ge)
rt <- abs(rt)
rt <- rbind(rt, matrix(rep(0, (n-n.tf)*n), nrow=(n-n.tf)))
rt1 <- Matrix(rt)
hist(rt1)
hist(c(rt1))
rt1 <- forceSymmetric(rt1)
rt1 <- as.matrix(rt1)
hist(rt1)
cor <- rt1
xy
dim(cor)
mat.th <- cor
isSymmetric(mat.th)
isSymmetric(rt1)
rt1 <- forceSymmetric(rt1)
isSymmetric(rt1)
dim(rt1)
mat.th <- rt1
hist(nmat)
scale.eigen
eig.res$values[1]
lam.n
lam.p
beta
dim(rt)
rt <- r[tf, ]
dim(rt)
write.matrix(rt, "rt.txt")
install.package("MASS")
install.packages("MASS")
library(MASS)
write.matrix(rt, "rt.txt")
hist(rt)
?write.matrix
colnames(rt) <- NULL
rownames(rt) <- NULL
head(colnames(rt))
rt[1, 1]
write.matrix(rt, "rt.txt")
